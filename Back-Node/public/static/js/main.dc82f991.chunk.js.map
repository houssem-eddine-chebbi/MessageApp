{"version":3,"sources":["Contexts/UserContext.tsx","Components/Login.tsx","Components/TabPanel.tsx","Contexts/Messages.reducer.ts","Contexts/Messages.middleware.ts","Contexts/Messages.context.tsx","Contexts/Messages.actions.ts","Components/Message.tsx","Components/ListMessages.tsx","Components/PrivateMessages.tsx","Components/AddMessage.tsx","Components/Messages.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["displayNameContext","createContext","displayName","DisplayNameProvider","children","useState","setDisplayName","Provider","value","useDisplayNameContext","useContext","useLoginStyles","makeStyles","container","width","height","item","padding","margin","paper","textField","title","textAlign","icone","center","submit","history","useHistory","Grid","className","Paper","elevation","Typography","variant","gutterBottom","color","TextField","id","label","onChange","e","target","Button","fullWidth","onClick","push","props","index","other","role","hidden","aria-labelledby","style","Box","p","messagesReducer","state","action","type","produce","draft","publicMessages","payload","privateMessages","message","private","getPublicMessages","a","Axios","get","response","data","messages","getPrivateMessages","postMessages","post","initialState","MessagesContext","MessagesProvider","useReducer","actions","dispatch","postMessage","useMessagesActions","dispatchMiddleware","useMessagesContext","useShowMessageStyles","card","marginLeft","isRight","ShowMessage","from","Card","CardContent","component","body","useEffect","maxHeight","overflow","map","useStyles","leftSide","borderLeft","listItem","marginBottom","border","selectedDisplayName","setSelectedDisplayName","listSender","uniq","m","to","filter","sender","sm","List","aria-label","ListItem","button","ListItemText","primary","AddMessage","emptyMessage","setMessage","error","setError","paddingRight","multiline","minRows","FormControlLabel","control","Checkbox","checked","tab","setTab","AppBar","position","Tabs","event","newValue","Tab","TabPanel","ListMessages","PrivateMessages","pathname","App","path","Login","Messages","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc82f991.chunk.js","sourcesContent":["import {createContext, Dispatch, SetStateAction, useContext, useState} from \"react\";\n\n\ninterface DisplayNameContext {\n  displayName: string\n  setDisplayName?: Dispatch<SetStateAction<string>>\n}\n\nconst displayNameContext = createContext<DisplayNameContext>({ displayName: '' })\n\ninterface Props {\n  children?: JSX.Element\n}\n\n// Provider\nexport const DisplayNameProvider = ({ children }: Props) => {\n  const [displayName, setDisplayName] = useState<string>('')\n\n  return (\n    <displayNameContext.Provider value={{ displayName, setDisplayName }} >\n      {children}\n    </displayNameContext.Provider>\n  )\n}\n\nexport const useDisplayNameContext = () => useContext(displayNameContext)\n\n\n","import {Button, Grid, makeStyles, Paper, TextField, Typography} from \"@material-ui/core\";\nimport ChatIcon from '@material-ui/icons/Chat';\nimport { useHistory } from \"react-router-dom\";\nimport {useDisplayNameContext} from \"../Contexts/UserContext\";\n\nconst useLoginStyles = makeStyles({\n  container: { width: '100%', height: '100%' },\n  item: { padding: 24, margin: 'auto' },\n  paper: { padding: 24 },\n  textField: { width: '100%' },\n  title: { textAlign: 'center' },\n  icone: { width: 250, height: 250 },\n  center: { margin: 'auto', padding: '0 50px' },\n  submit: { margin: '12px auto'}\n})\n\nexport default () => {\n  const { displayName, setDisplayName } = useDisplayNameContext()\n  const { container, item, paper, textField, title, icone, center, submit } = useLoginStyles({})\n  const history = useHistory()\n\n  return (\n    <Grid container className={container}>\n      <Grid item className={item} >\n        <Paper elevation={3} className={paper}>\n          <Typography variant=\"h4\" className={title} gutterBottom>\n            Messages App\n          </Typography>\n          <Grid item className={center} ><ChatIcon className={icone} color={\"secondary\"} /></Grid>\n          <TextField\n            color={\"secondary\"}\n            className={textField}\n            id=\"outlined-basic\"\n            label=\"Enter your display Name\"\n            variant=\"outlined\"\n            value={displayName}\n            onChange={e => {setDisplayName && setDisplayName(e.target.value)}}\n          />\n          <Button className={submit} fullWidth variant=\"contained\" color=\"secondary\" onClick={() => history.push('/messages')}>\n            Submit\n          </Button>\n        </Paper>\n      </Grid>\n    </Grid>\n  )\n}","import {Box, Typography} from \"@material-ui/core\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nexport default (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n      style={ { width: '100%'}}\n    >\n      {value === index && (\n        <Box p={3}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}","import {MessageAction, MessagesContextState} from \"./Messages.types\";\nimport produce from \"immer\";\n\n\nexport const messagesReducer =\n  (state: MessagesContextState, action: MessageAction): MessagesContextState => {\n    switch (action.type) {\n      case \"GET_PUBLIC_MESSAGES\": return produce(state, draft => { draft.publicMessages = action.payload.publicMessages ?? [] })\n      case \"GET_PRIVATE_MESSAGES\": return produce(state, draft => { draft.privateMessages = action.payload.privateMessages ?? [] })\n      case \"POST_MESSAGE\": return produce(state, draft => {\n        const { message } = action.payload\n        if (message) {\n          if (message.private)\n            draft.privateMessages = [...draft.privateMessages, message]\n          else draft.publicMessages = [...draft.publicMessages, message]\n        }\n      })\n      default:\n        return { ...state }\n    }\n  }\n","import {Dispatch} from \"react\";\nimport {MessageAction, Messages} from \"./Messages.types\";\nimport Axios from \"axios\";\n\nexport const dispatchMiddleware = (dispatch: Dispatch<MessageAction>) => async (action: MessageAction) => {\n  switch (action.type) {\n    case 'GET_PUBLIC_MESSAGES': dispatch(await getPublicMessages(action)); break\n    case 'GET_PRIVATE_MESSAGES': dispatch(await getPrivateMessages(action)); break\n    case 'POST_MESSAGE': dispatch(await postMessages(action)); break\n    default: dispatch(action); break\n  }\n}\n\nconst getPublicMessages = async (action: MessageAction): Promise<MessageAction> => {\n  const response = await Axios.get<{ messages: Messages }>(`http://localhost:5555/api/messages/publicmessages`)\n  return { type: 'GET_PUBLIC_MESSAGES', payload: { publicMessages: response.data.messages } }\n}\n\nconst getPrivateMessages = async (action: MessageAction): Promise<MessageAction> => {\n  const { displayName } = action.payload\n\n  const response = await Axios.get<{ messages: Messages }>(`http://localhost:5555/api/messages/privatemessages?displayName=${displayName}`)\n  return { type: 'GET_PRIVATE_MESSAGES', payload: { privateMessages: response.data.messages } }\n}\n\nconst postMessages = async (action: MessageAction): Promise<MessageAction> => {\n  const { message } = action.payload\n\n  await Axios.post<{ messages: Messages }>(`http://localhost:5555/api/messages/postmessage`, { message })\n\n  return { type: 'POST_MESSAGE', payload: { message: message } }\n}","import {createContext, FunctionComponent, useContext, useReducer} from \"react\";\nimport {MessagesContextState} from \"./Messages.types\";\nimport {messagesReducer} from \"./Messages.reducer\";\nimport {useMessagesActions} from \"./Messages.actions\";\nimport {dispatchMiddleware} from \"./Messages.middleware\";\n\n\nexport const initialState: MessagesContextState = {\n  publicMessages: [],\n  privateMessages: []\n}\n\nconst MessagesContext = createContext(initialState)\n\n\nconst MessagesProvider: FunctionComponent = ({ children }) => {\n  const [state, dispatch] = useReducer(messagesReducer, initialState)\n  const enhancedDispatch = dispatchMiddleware(dispatch)\n  const actions = useMessagesActions(state, enhancedDispatch)\n\n  return (\n    <MessagesContext.Provider value={{ ...state, actions }} >\n      {children}\n    </MessagesContext.Provider>\n  )\n}\n\nconst useMessagesContext = () : MessagesContextState => useContext(MessagesContext)\n\nexport {\n  MessagesProvider,\n  MessagesContext,\n  useMessagesContext,\n}\n","import {Message, MessageAction, MessagesActions, MessagesContextState} from \"./Messages.types\";\nimport {Dispatch} from \"react\";\n\nexport const useMessagesActions =\n  (state: MessagesContextState, dispatch: Dispatch<MessageAction>): MessagesActions => ({\n    getPublicMessages: () => dispatch({ type: 'GET_PUBLIC_MESSAGES', payload: { } }),\n    getPrivateMessages: (displayName: string) => dispatch({ type: 'GET_PRIVATE_MESSAGES', payload: { displayName } }),\n    postMessage: (message: Message) => dispatch({ type: 'POST_MESSAGE', payload: { message } }),\n\n  })","import {Message} from \"../Contexts/Messages.types\";\nimport {Card, CardContent, makeStyles, Typography} from \"@material-ui/core\";\nimport {useDisplayNameContext} from \"../Contexts/UserContext\";\n\ninterface Props {\n  message: Message\n}\n\nconst useShowMessageStyles = makeStyles({\n  card: (({isRight}: {isRight: boolean}) => ({ margin: 24, marginLeft: isRight ? 'auto' : 24 }))\n\n})\n\nexport const ShowMessage = ({ message }: Props) => {\n  const { displayName } = useDisplayNameContext()\n  const { card } = useShowMessageStyles({isRight: displayName === message.from})\n\n  return (\n    <Card variant=\"outlined\" className={card} >\n      <CardContent>\n        <Typography  color=\"textSecondary\" gutterBottom>\n          {message.from}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {message.body}\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}","import {useMessagesContext} from \"../Contexts/Messages.context\";\nimport {useEffect} from \"react\";\nimport {ShowMessage} from \"./Message\";\nimport {Grid} from \"@material-ui/core\";\n\ninterface Props {\n}\n\nexport default (props: Props) => {\n  const { publicMessages, actions } = useMessagesContext()\n\n  useEffect(() => {\n    actions?.getPublicMessages()\n  }, [])\n\n  return (\n    <Grid container style={{ maxHeight: '70vh', overflow: 'scroll' }}>\n      {publicMessages.map(message => <Grid container><ShowMessage message={message} /></Grid>)}\n    </Grid>\n  )\n}\n","import {\n  Card,\n  CardContent,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  makeStyles,\n  Typography\n} from \"@material-ui/core\";\nimport {ShowMessage} from \"./Message\";\nimport {useEffect, useState} from \"react\";\nimport {useMessagesContext} from \"../Contexts/Messages.context\";\nimport {useDisplayNameContext} from \"../Contexts/UserContext\";\nimport { uniq } from 'lodash'\n\nconst useStyles = makeStyles({\n  leftSide: { width: '100%', borderLeft: '1px solid rgba(0, 0, 0, 0.12)', maxHeight: '70vh', overflow: 'scroll'},\n  listItem: { marginBottom: 12, border: '1px solid rgba(0, 0, 0, 0.12)' }\n})\n\nexport default () => {\n  const { leftSide, listItem } = useStyles({})\n  const { displayName } = useDisplayNameContext()\n  const { privateMessages, actions } = useMessagesContext()\n  const [selectedDisplayName, setSelectedDisplayName ] = useState('')\n\n  const listSender: string[] = uniq([...privateMessages.map(m => m.from || ''), ...privateMessages.map(m => m.to || '')])\n    .filter(sender => sender !== '' && sender !== displayName)\n\n  useEffect(() => {\n    actions?.getPrivateMessages(displayName)\n  }, [])\n\n  return (\n    <Grid container style={ { width: '100%'}} >\n      <Grid item sm={4} style={ { width: '100%'}}>\n        <List component=\"nav\" aria-label=\"main mailbox folders\">\n        { listSender.map(sender => <>\n            <ListItem button onClick={() => setSelectedDisplayName(sender)} className={listItem}>\n              <ListItemText primary={sender} />\n            </ListItem>\n        </>\n        )}\n        </List>\n      </Grid>\n      <Grid item sm={8} className={leftSide}>\n        {selectedDisplayName !== '' &&\n          privateMessages\n            .filter(m => m.from === selectedDisplayName || m.to === selectedDisplayName)\n            .map(message => <Grid container><ShowMessage message={message} /></Grid>)}\n      </Grid>\n    </Grid>\n  )\n}","import {useState} from \"react\";\nimport {Button, Checkbox, FormControlLabel, Grid, TextField, Typography} from \"@material-ui/core\";\nimport {useMessagesContext} from \"../Contexts/Messages.context\";\nimport {Message} from \"../Contexts/Messages.types\";\nimport {useDisplayNameContext} from \"../Contexts/UserContext\";\nimport produce from \"immer\";\n\nconst AddMessage = () => {\n  const { displayName } = useDisplayNameContext()\n  const emptyMessage = { body: '', private: false, from: displayName}\n  const [message, setMessage] = useState<Message>(emptyMessage);\n  const [error, setError] = useState('');\n  const { actions } = useMessagesContext()\n\n  return (\n    <Grid item container style={{ padding: '24px 58px', width: '100%' }}>\n      { error && <Grid container ><Typography color={\"secondary\"}>{error}</Typography></Grid> }\n      <Grid item sm={10} style={{  paddingRight: 24 }}>\n        <TextField\n          style={{ width: \"100%\" }}\n          color={\"secondary\"}\n          id=\"send-message\"\n          label=\"Enter your Message\"\n          variant=\"outlined\"\n          value={message.body}\n          onChange={e => {setMessage(m => produce(m, draft => {draft.body = e.target.value}))}}\n          multiline={true}\n          minRows={5}\n        />\n      </Grid>\n      <Grid item sm={2} >\n        <Grid container>\n          <Button variant=\"contained\" color=\"secondary\" style={{ width: '100%' }} onClick={e => {\n            if (message.private && !message.to) return setError('please select a recipient')\n            actions?.postMessage(message)\n            setMessage(emptyMessage)\n          }}>\n            Send\n          </Button>\n        </Grid>\n        <Grid container>\n          <FormControlLabel\n            control={<Checkbox checked={message.private} onChange={() => setMessage(m => produce(m, draft => {draft.private = !m.private}))} />}\n            label=\"Private\"\n          />\n        </Grid>\n        {\n          message.private && <TextField\n              style={{  width: \"100%\" }}\n              color={\"secondary\"}\n              id=\"recipient\"\n              label=\"Recipient\"\n              value={message.to}\n              onChange={e => setMessage(m => produce(m, draft => {draft.to = e.target.value}))}\n          />\n        }\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default AddMessage","import {AppBar, Grid, Tab, Tabs} from \"@material-ui/core\";\nimport {useState} from \"react\";\nimport TabPanel from \"./TabPanel\";\nimport ListMessages from \"./ListMessages\";\nimport PrivateMessages from \"./PrivateMessages\";\nimport AddMessage from \"./AddMessage\";\nimport {useDisplayNameContext} from \"../Contexts/UserContext\";\nimport { Redirect } from \"react-router-dom\";\n\n\nexport default () => {\n  const { displayName } = useDisplayNameContext()\n  const [tab, setTab] = useState(0);\n\n\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setTab(newValue);\n  };\n\n  return (\n    <>\n    {\n    displayName ?\n      <Grid container>\n        <AppBar position=\"static\" color={\"secondary\"}>\n          <Tabs value={tab} onChange={handleChange} aria-label=\"simple tabs example\">\n            <Tab style={{ margin: 'auto' }} label=\"Public Channel\"  />\n            <Tab style={{ margin: 'auto' }} label=\"Private Messages\"/>\n          </Tabs>\n        </AppBar>\n        <TabPanel value={tab} index={0}>\n          <ListMessages />\n        </TabPanel>\n        <TabPanel value={tab} index={1}>\n          <PrivateMessages />\n        </TabPanel>\n        <AddMessage />\n      </Grid> :\n      <Redirect to={{pathname: \"/login\"}} />\n    }\n    </>\n  )\n}\n\n","import React from 'react';\nimport {BrowserRouter, Switch, Route, Redirect} from \"react-router-dom\";\nimport Login from \"./Components/Login\";\nimport {DisplayNameProvider} from \"./Contexts/UserContext\";\nimport Messages from \"./Components/Messages\";\nimport {MessagesProvider} from \"./Contexts/Messages.context\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <DisplayNameProvider>\n        <MessagesProvider>\n            <BrowserRouter>\n              <Switch>\n                <Route path=\"/login\" ><Login /></Route>\n                <Route path=\"/messages\" ><Messages /></Route>\n                <Route path=\"\" >\n                  <Redirect to={\"/login\"} />\n                </Route>\n              </Switch>\n            </BrowserRouter>\n        </MessagesProvider>\n      </DisplayNameProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}